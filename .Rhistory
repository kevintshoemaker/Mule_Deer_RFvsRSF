tn <- length(which((trueLabels==0)&(predLabels==0)))
fp <- length(which((trueLabels==0)&(predLabels==1)))
fn <- length(which((trueLabels==1)&(predLabels==0)))
pr_agree <- (tp+tn)/tot    # overall agreement, or accuracy
pr_agree_rand <- ((tp+fn)/tot)*((tp+fp)/tot)+((fn+tn)/tot)*((fp+tn)/tot)
CVresults$bestkappa_CV <- (pr_agree-pr_agree_rand)/(1-pr_agree_rand)
CVresults$confusionmat <- matrix(c(tn,fn,fp,tp),nrow=2,ncol=2)
rownames(CVresults$confusionmat) <- c("Actual not used","Actual used")
colnames(CVresults$confusionmat) <- c("Predicted not used","Predicted used")
CVresults$sensitivity <- tp/(tp+fn)
CVresults$specificity <- tn/(tn+fp)
CVresults$toterror <- (fn+fp)/tot
CVresults$CVpred[which(CVresults$CVpred==1)] <- 0.999999
CVresults$CVpred[which(CVresults$CVpred==0)] <- 0.000001
CVresults$realpred[which(CVresults$realpred==1)] <- 0.999999
CVresults$realpred[which(CVresults$realpred==0)] <- 0.000001
realdata = CVresults$observed
fit_deviance_CV <- mean(-2*(dbinom(CVresults$observed,1,CVresults$CVpred,log=T)-dbinom(realdata,1,realdata,log=T)))
fit_deviance_real <- mean(-2*(dbinom(CVresults$observed,1,CVresults$realpred,log=T)-dbinom(realdata,1,realdata,log=T)))
null_deviance <- mean(-2*(dbinom(CVresults$observed,1,mean(CVresults$observed),log=T)-dbinom(realdata,1,realdata,log=T)))
CVresults$deviance_explained_CV <- (null_deviance-fit_deviance_CV)/null_deviance   # based on holdout samples
CVresults$deviance_explained_real <- (null_deviance-fit_deviance_real)/null_deviance   # based on full model...
return(CVresults)
}
type= "GLMM" #"RF"
season="summer"
CVs[["GLMM"]]
CVs[["GLMM"]]$winter$CVpred
tail(CVs[["GLMM"]]$winter$CVpred)
which(is.na(CVs[["GLMM"]]$winter$CVpred))
which(is.nan(CVs[["GLMM"]]$winter$CVpred))
which(is.na(CVs[["GLMM"]]$winter$realpred))
which(is.nan(CVs[["GLMM"]]$winter$realpred))
which(is.nan(CVs[["GLMM"]]$winter$observed))
which(is.na(CVs[["GLMM"]]$winter$observed))
which(is.na(CVs[["GLMM"]]$winter$CV_RMSE))
which(is.na(CVs[["GLMM"]]$winter$CV_RMSE))
CVs[["GLMM"]]$winter$CV_RMSE
CVs[["GLMM"]]$winter$auc_CV
prediction(CVs[["GLMM"]]$winter$CVpred,CVs[["GLMM"]]$winter$observed)
pred <- prediction(CVs[["GLMM"]]$winter$CVpred,CVs[["GLMM"]]$winter$observed)
perf <- performance(pred,"tpr","fpr")
perf
performance(pred,"auc")
season
season <- "winter"
type
CVs[[type]][[season]]
realdata
CrossValidateByDeer <- function(n.folds,season="summer",type="RF",plot=F){
uniquedeer <- as.character(unique(deer[[season]]$altid))
ndeer <- length(uniquedeer)
folds_df <- data.frame(
deer = uniquedeer,
fold = rep_len(1:n.folds,ndeer)
)
foldVector <- folds_df$fold[match(as.character(deer[[season]]$altid),folds_df$deer)]
predictCols <- which(names(deer[[season]])%in%pred.names)
if(type=="RF"){
fullmodel<-RFs[[season]]
}else{
fullmodel <- GLMMs[[season]]
}
CVresults <- list()
CVresults$CVpred <- numeric(nrow(deer[[season]]))
CVresults$realpred <- numeric(nrow(deer[[season]]))
CVresults$observed <- numeric(nrow(deer[[season]]))
if(type=="RF"){
response="used_fac"    #"resp_factor"
}else{
response="used"    #"resp_factor"
}
counter = 1
i=n.folds
for(i in 1:n.folds){
if(type=="RF"){
model <- cforest(formula1, data = deer[[season]][which(foldVector!=i),], controls=cforestControl)
predict_CV  <- predict(model,newdata=deer[[season]][which(foldVector==i),],type="prob")
predict_real  <-  predict(fullmodel,newdata=deer[[season]][which(foldVector==i),],type="prob")
REAL <- deer[[season]]$used[which(foldVector==i)]
j=1
for(j in 1:length(which(foldVector==i))){
CVresults$CVpred[counter] <- as.numeric(predict_CV[[j]][,2])
CVresults$observed[counter] <-  as.numeric(REAL[j])
CVresults$realpred[counter] <- as.numeric(predict_real[[j]][,2])
counter = counter + 1
}
}else{
model <- glmer(attributes(GLMMs[[season]]@frame)$formula,
family="binomial", data=deer[[season]][which(foldVector!=i),],na.action="na.fail")
CVresults$CVpred[which(foldVector==i)]  <- plogis(predict(model,newdata=deer[[season]][which(foldVector==i),],allow.new.levels = TRUE))
CVresults$realpred[which(foldVector==i)] <-  predict(fullmodel,newdata=deer[[season]][which(foldVector==i),],allow.new.levels = TRUE)
CVresults$observed[which(foldVector==i)] <- deer[[season]]$used[which(foldVector==i)]
}
cat(sprintf("fold %s out of %s\n",i,n.folds))
}
CVresults$CV_RMSE = sqrt(mean((CVresults$observed-CVresults$CVpred)^2))       # root mean squared error for holdout samples in 10-fold cross-validation ...
CVresults$real_RMSE = sqrt(mean((CVresults$observed-CVresults$realpred)^2))   # root mean squared error for residuals from final model
# realprediction <- predict(rf_model1,newdata=df,type="prob")
if(plot){
graphics.off()
par(mfrow=c(2,1))
par(ask=T)
pred <- prediction(CVresults$CVpred,CVresults$observed)     # for holdout samples in cross-validation
perf <- performance(pred,"tpr","fpr")
auc <- performance(pred,"auc")
plot(perf, main=sprintf("%s Cross Validation",type))
text(.9,.1,paste("AUC = ",round(auc@y.values[[1]],2),sep=""))
pred <- prediction(CVresults$realpred,CVresults$observed)     # for final model
perf <- performance(pred,"tpr","fpr")
auc <- performance(pred,"auc")
plot(perf, main=sprintf("%s Full Model",type))
text(.9,.1,paste("AUC = ",round(auc@y.values[[1]],2),sep=""))
}else{
pred <- prediction(CVresults$CVpred,CVresults$observed)     # for holdout samples in cross-validation
perf <- performance(pred,"tpr","fpr")
CVresults$auc_CV <- performance(pred,"auc")
pred <- prediction(CVresults$realpred,CVresults$observed)     # for final model
perf <- performance(pred,"tpr","fpr")
CVresults$auc_full <- performance(pred,"auc")
}
# COHEN KAPPA statistics
thresholds <- seq(0.01,0.99,length=101)   # "artificial" extinction thresholds across which to examine performance
kappa <- numeric(length(thresholds))
for(i in 1:length(thresholds)){
trueLabels <- CVresults$observed
predLabels <- ifelse(CVresults$CVpred>=thresholds[i],1,0)
tot <- length(CVresults$observed)
tp <- length(which((trueLabels==1)&(predLabels==1)))
tn <- length(which((trueLabels==0)&(predLabels==0)))
fp <- length(which((trueLabels==0)&(predLabels==1)))
fn <- length(which((trueLabels==1)&(predLabels==0)))
pr_agree <- (tp+tn)/tot    # overall agreement, or accuracy
pr_agree_rand <- ((tp+fn)/tot)*((tp+fp)/tot)+((fn+tn)/tot)*((fp+tn)/tot)
kappa[i] <- (pr_agree-pr_agree_rand)/(1-pr_agree_rand)
}
#plot(thresholds,kappa,type="l",xlab="Threshold", ylab="Cohen's Kappa", main="Holdout sample performance")
# find threshold value associated with highest Kappa for C-V data
CVresults$cutoff_CV <- thresholds[which.max(kappa)]   # max kappa cutoff
kappa <- numeric(length(thresholds))
for(i in 1:length(thresholds)){
trueLabels <- CVresults$observed
predLabels <- ifelse(CVresults$realpred>=thresholds[i],1,0)
tot <- length(CVresults$observed)
tp <- length(which((trueLabels==1)&(predLabels==1)))
tn <- length(which((trueLabels==0)&(predLabels==0)))
fp <- length(which((trueLabels==0)&(predLabels==1)))
fn <- length(which((trueLabels==1)&(predLabels==0)))
pr_agree <- (tp+tn)/tot    # overall agreement, or accuracy
pr_agree_rand <- ((tp+fn)/tot)*((tp+fp)/tot)+((fn+tn)/tot)*((fp+tn)/tot)
kappa[i] <- (pr_agree-pr_agree_rand)/(1-pr_agree_rand)
}
#plot(thresholds,kappa,type="l",xlab="Threshold", ylab="Cohen's Kappa", main="Performance: full model")
CVresults$cutoff_full <- thresholds[which.max(kappa)]   # max kappa cutoff
### display confusion matrix and kappa for a single threshold
trueLabels <- CVresults$observed
predLabels <- ifelse(CVresults$CVpred>=CVresults$cutoff_CV,1,0)
tot <- length(CVresults$observed)
tp <- length(which((trueLabels==1)&(predLabels==1)))
tn <- length(which((trueLabels==0)&(predLabels==0)))
fp <- length(which((trueLabels==0)&(predLabels==1)))
fn <- length(which((trueLabels==1)&(predLabels==0)))
pr_agree <- (tp+tn)/tot    # overall agreement, or accuracy
pr_agree_rand <- ((tp+fn)/tot)*((tp+fp)/tot)+((fn+tn)/tot)*((fp+tn)/tot)
CVresults$bestkappa_CV <- (pr_agree-pr_agree_rand)/(1-pr_agree_rand)
CVresults$confusionmat <- matrix(c(tn,fn,fp,tp),nrow=2,ncol=2)
rownames(CVresults$confusionmat) <- c("Actual not used","Actual used")
colnames(CVresults$confusionmat) <- c("Predicted not used","Predicted used")
CVresults$sensitivity <- tp/(tp+fn)
CVresults$specificity <- tn/(tn+fp)
CVresults$toterror <- (fn+fp)/tot
CVresults$CVpred[which(CVresults$CVpred==1)] <- 0.999999
CVresults$CVpred[which(CVresults$CVpred==0)] <- 0.000001
CVresults$realpred[which(CVresults$realpred==1)] <- 0.999999
CVresults$realpred[which(CVresults$realpred==0)] <- 0.000001
realdata = CVresults$observed
fit_deviance_CV <- mean(-2*(dbinom(CVresults$observed,1,CVresults$CVpred,log=T)-dbinom(realdata,1,realdata,log=T)))
fit_deviance_real <- mean(-2*(dbinom(CVresults$observed,1,CVresults$realpred,log=T)-dbinom(realdata,1,realdata,log=T)))
null_deviance <- mean(-2*(dbinom(CVresults$observed,1,mean(CVresults$observed),log=T)-dbinom(realdata,1,realdata,log=T)))
CVresults$deviance_explained_CV <- (null_deviance-fit_deviance_CV)/null_deviance   # based on holdout samples
CVresults$deviance_explained_real <- (null_deviance-fit_deviance_real)/null_deviance   # based on full model...
return(CVresults)
}
CVs[["GLMM"]] <- list()
uniquedeer <- as.character(unique(deer[[season]]$altid))
n.folds <- length(uniquedeer)
type= "GLMM" #"RF"
season="summer"
CVs[[type]][[season]] <- CrossValidateByDeer(n.folds=length(unique(deer[[season]]$altid)),season=season,type=type,plot=F)
type= "GLMM" #"RF"
season="winter"
CVs[[type]][[season]] <- CrossValidateByDeer(n.folds=length(unique(deer[[season]]$altid)),season=season,type=type,plot=F)
getwd()
save(CVs,file = "CVs2.RData")
CVs[[type]][[season]]
type= "GLMM" #"RF"
season="summer"
PlotPerformance(CVs[[type]][[season]])
type= "GLMM" #"RF"
season="winter"
PlotPerformance(CVs[[type]][[season]])
type= "RF" #"RF"
season="summer"
PlotPerformance(CVs[[type]][[season]])
type= "RF" #"RF"
season="winter"
PlotPerformance(CVs[[type]][[season]])
season="summer"
roc1 <- roc(CVs$GLMM[[season]]$observed,CVs$GLMM[[season]]$CVpred)
roc2 <- roc(CVs$RF[[season]]$observed,CVs$RF[[season]]$CVpred)
roc.test(roc1, roc2)
season="winter"
roc1 <- roc(CVs$GLMM[[season]]$observed,CVs$GLMM[[season]]$CVpred)
roc2 <- roc(CVs$RF[[season]]$observed,CVs$RF[[season]]$CVpred)
roc.test(roc1, roc2)
CV_RMSE
CVs$GLMM[[season]]$CV_RMSE
rastercovs
setwd(spatialdir)
rastercovs$summer$stand_cos_aspect <- (rastercovs$summer$cos_aspect- mean(deer$summer$cos_aspect))/sd(deer$summer$cos_aspect)
plot(rastercovs$summer$stand_cos_aspect)
rastercovs$summer$stand_sin_aspect <- (rastercovs$summer$sin_aspect- mean(deer$summer$sin_aspect))/sd(deer$summer$sin_aspect)
rastercovs$summer$stand_elevation <- (rastercovs$summer$elevation- mean(deer$summer$elevation))/sd(deer$summer$elevation)
rastercovs$summer$stand_slope <- (rastercovs$summer$slope- mean(deer$summer$slope))/sd(deer$summer$slope)
rastercovs$summer$stand_dist_to_water <- (rastercovs$summer$dist_to_water- mean(deer$summer$dist_to_water))/sd(deer$summer$dist_to_water)
predmaps
save(predmaps,file = "PredMaps.RData")
cat_cov
newdata <- data.frame(
cos_aspect = getValues(rastercovs$summer$cos_aspect),
sin_aspect = getValues(rastercovs$summer$sin_aspect),
elevation = as.integer(getValues(rastercovs$summer$elevation)),
slope = as.integer(getValues(rastercovs$summer$slope)),
dist_to_water = getValues(rastercovs$summer$dist_to_water),
veg_class = factor(veg_class$veg_class$classes[match(getValues(rastercovs$summer$veg_class),veg_class$veg_class$ID)],levels=levels(deer$summer$veg_class)),
stand_cos_aspect = getValues(rastercovs$summer$stand_cos_aspect),
stand_sin_aspect = getValues(rastercovs$summer$stand_sin_aspect),
stand_elevation = getValues(rastercovs$summer$stand_elevation),
stand_slope = getValues(rastercovs$summer$stand_slope),
stand_dist_to_water = getValues(rastercovs$summer$stand_dist_to_water)
)
newdata$altid = factor( 'P003',levels=levels(deer[["summer"]]$altid))
head(newdata)
pred1 <- plogis(predict(GLMMs[["summer"]],newdata))     # predict to the full raster for summer range.  Does not take long!
predmaps[["summer"]][["GLMM"]] <- rastercovs$summer$elevation
predmaps[["summer"]][["GLMM"]] <- setValues(predmaps[["summer"]][["GLMM"]],pred1)
plot(predmaps$summer$GLMM)
newdata <- data.frame(
cos_aspect = getValues(rastercovs$winter$cos_aspect),
sin_aspect = getValues(rastercovs$winter$sin_aspect),
elevation = as.integer(getValues(rastercovs$winter$elevation)),
slope = as.integer(getValues(rastercovs$winter$slope)),
dist_to_water = getValues(rastercovs$winter$dist_to_water),
veg_class = factor(veg_class$veg_class$classes[match(getValues(rastercovs$winter$veg_class),veg_class$veg_class$ID)],levels=levels(deer$winter$veg_class)),
stand_cos_aspect = getValues(rastercovs$winter$stand_cos_aspect),
stand_sin_aspect = getValues(rastercovs$winter$stand_sin_aspect),
stand_elevation = getValues(rastercovs$winter$stand_elevation),
stand_slope = getValues(rastercovs$winter$stand_slope),
stand_dist_to_water = getValues(rastercovs$winter$stand_dist_to_water)
)
newdata$altid = factor( 'P003',levels=levels(deer[["winter"]]$altid))
head(newdata)
newdata$veg_class[1:10]
rastercovs[["winter"]][["veg_class"]]
res(rastercovs[["winter"]][["veg_class"]])
rastercovs$summer$stand_cos_aspect <- (rastercovs$summer$cos_aspect- mean(deer$summer$cos_aspect))/sd(deer$summer$cos_aspect)
plot(rastercovs$summer$stand_cos_aspect)
rastercovs$summer$stand_sin_aspect <- (rastercovs$summer$sin_aspect- mean(deer$summer$sin_aspect))/sd(deer$summer$sin_aspect)
rastercovs$summer$stand_elevation <- (rastercovs$summer$elevation- mean(deer$summer$elevation))/sd(deer$summer$elevation)
rastercovs$summer$stand_slope <- (rastercovs$summer$slope- mean(deer$summer$slope))/sd(deer$summer$slope)
rastercovs$summer$stand_dist_to_water <- (rastercovs$summer$dist_to_water- mean(deer$summer$dist_to_water))/sd(deer$summer$dist_to_water)
is.factor(rastercovs$summer$veg_class)
rat$classes <- rat$landcover
levels(rastercovs$summer$veg_class) <- rat[,c("ID","classes")]
rat[,c("ID","classes")]
rat$landcover
rat <- levels(rastercovs[["summer"]][["veg_class"]])[[1]]
rat
rastercovs[["summer"]][["veg_class"]]
rastercovs[["summer"]][["veg_class"]]@data@values
unique(rastercovs[["summer"]][["veg_class"]]@data@values)
levels(rastercovs[["summer"]][["veg_class"]])[[1]]
rastercovs[["summer"]][["veg_class"]]@data@attributes
setwd("E:\\Dropbox\\Mule Deer\\Methods paper\\GIS\\Summer_veg_raster\\Summer_veg_raster")
temp <- raster("summer_veg.tif")
attrib <- temp@data@attributes
attrib
levels(deer$summer$veg_class)
target <- levels(deer$summer$veg_class)
subs <- attrib[[1]][,c("Value","Habitat_Type")]
subs$HabType2 <- c("Riparian","PJ","mtn_mahog","asage","intro_grass","grassland","shb_mead","roads","desert_scrub","Dec_shrub","aspen","NA")
rastercovs[["summer"]][["veg_class"]]@data@attributes[[1]]$Habitat_Type
rastercovs[["summer"]][["veg_class"]]@data@attributes[[1]]
attrib[[1]]$Habitat_Type
habitats <- attrib[[1]]$Habitat_Type
is.factor(rastercovs[["summer"]][["veg_class"]])
levels(rastercovs[["summer"]][["veg_class"]])
rat
attrib[[1]][,c(1,5)]
levels(rastercovs[["summer"]][["veg_class"]]) <- attrib[[1]][,c(1,5)]  #rat
levels(rastercovs[["summer"]][["veg_class"]])
attrib[[1]][,c(1,5)]
attrib[[1]]
levels(rastercovs[["summer"]][["veg_class"]]) <- attrib[[1]][,c(3,5)]  #rat
levels(rastercovs[["summer"]][["veg_class"]])
temp <- attrib[[1]][,c(3,5)]
temp
names(temp)
names(temp)[1]
names(temp)[1] <- "ID"
temp
levels(rastercovs[["summer"]][["veg_class"]]) <- temp  #rat
levels(rastercovs[["summer"]][["veg_class"]])
factor(veg_class$veg_class$classes[match(getValues(rastercovs$summer$veg_class),veg_class$veg_class$ID)],levels=levels(deer$summer$veg_class))
getValues(rastercovs$summer$veg_class)
veg_class$veg_class$ID
veg_class <- levels(rastercovs$summer$veg_class)
veg_class
newdata <- data.frame(
cos_aspect = getValues(rastercovs$summer$cos_aspect),
sin_aspect = getValues(rastercovs$summer$sin_aspect),
elevation = as.integer(getValues(rastercovs$summer$elevation)),
slope = as.integer(getValues(rastercovs$summer$slope)),
dist_to_water = getValues(rastercovs$summer$dist_to_water),
veg_class = factor(veg_class$veg_class$classes[match(getValues(rastercovs$summer$veg_class),veg_class$veg_class$ID)],levels=levels(deer$summer$veg_class)),
stand_cos_aspect = getValues(rastercovs$summer$stand_cos_aspect),
stand_sin_aspect = getValues(rastercovs$summer$stand_sin_aspect),
stand_elevation = getValues(rastercovs$summer$stand_elevation),
stand_slope = getValues(rastercovs$summer$stand_slope),
stand_dist_to_water = getValues(rastercovs$summer$stand_dist_to_water)
)
factor(veg_class$veg_class$classes[match(getValues(rastercovs$summer$veg_class),veg_class$veg_class$ID)],levels=levels(deer$summer$veg_class))
getValues(rastercovs$summer$veg_class)
veg_class$veg_class$ID
levels(rastercovs$summer$veg_class)
levels(rastercovs[["summer"]][["veg_class"]])
temp
levels(rastercovs[["winter"]][["veg_class"]])
levels(rastercovs$summer$veg_class)
cat_cov <- c("veg_class")
veg_class <- levels(rastercovs$summer$veg_class)
names(veg_class) <- "veg_class"
factor_list <- list(veg_class)
names(factor_list) <- cat_cov
altid<-factor( 'P003',levels=levels(deer[["summer"]]$altid))
add2<-data.frame(altid)
str(add2)
veg_class$veg_class$ID
newdata <- data.frame(
cos_aspect = getValues(rastercovs$summer$cos_aspect),
sin_aspect = getValues(rastercovs$summer$sin_aspect),
elevation = as.integer(getValues(rastercovs$summer$elevation)),
slope = as.integer(getValues(rastercovs$summer$slope)),
dist_to_water = getValues(rastercovs$summer$dist_to_water),
veg_class = factor(veg_class$veg_class$classes[match(getValues(rastercovs$summer$veg_class),veg_class$veg_class$ID)],levels=levels(deer$summer$veg_class)),
stand_cos_aspect = getValues(rastercovs$summer$stand_cos_aspect),
stand_sin_aspect = getValues(rastercovs$summer$stand_sin_aspect),
stand_elevation = getValues(rastercovs$summer$stand_elevation),
stand_slope = getValues(rastercovs$summer$stand_slope),
stand_dist_to_water = getValues(rastercovs$summer$stand_dist_to_water)
)
match(getValues(rastercovs$summer$veg_class),veg_class$veg_class$ID)
veg_class$veg_class$classes
factor(veg_class$veg_class$Habitat_Type[match(getValues(rastercovs$summer$veg_class),veg_class$veg_class$ID)],levels=levels(deer$summer$veg_class))
veg_class$veg_class$Habitat_Type
as.character(veg_class$veg_class$Habitat_Type)
factor(as.character(veg_class$veg_class$Habitat_Type)[match(getValues(rastercovs$summer$veg_class),veg_class$veg_class$ID)],levels=levels(deer$summer$veg_class))
getValues(rastercovs$summer$veg_class)
veg_class$veg_class$ID)
match(getValues(rastercovs$summer$veg_class),veg_class$veg_class$ID)
levels(deer$summer$veg_class)
veg_class
levels(rastercovs$winter$veg_class)
attrib
target <- levels(deer$summer$veg_class)
subs <- attrib[[1]][,c("Value","Habitat_Type")]
subs$HabType2 <- c("Riparian","PJ","mtn_mahog","asage","intro_grass","grassland","shb_mead","roads","desert_scrub","Dec_shrub","aspen","NA")
habitats <- attrib[[1]]$Habitat_Type
habitats
subs
attrib[[1]]
temp <- subs
names(temp)[1] <- "ID"
temp
levels(rastercovs[["summer"]][["veg_class"]]) <- temp  #rat
cat_cov <- c("veg_class")
veg_class <- levels(rastercovs$summer$veg_class)
names(veg_class) <- "veg_class"
veg_class
veg_class$veg_class$HabType2
veg_class$veg_class$HabType2[match(getValues(rastercovs$summer$veg_class),veg_class$veg_class$ID)]
veg_class$veg_class$ID
veg_class$veg_class$HabType2
newdata <- data.frame(
cos_aspect = getValues(rastercovs$summer$cos_aspect),
sin_aspect = getValues(rastercovs$summer$sin_aspect),
elevation = as.integer(getValues(rastercovs$summer$elevation)),
slope = as.integer(getValues(rastercovs$summer$slope)),
dist_to_water = getValues(rastercovs$summer$dist_to_water),
veg_class = factor(veg_class$veg_class$HabType2[match(getValues(rastercovs$summer$veg_class),veg_class$veg_class$ID)],levels=levels(deer$summer$veg_class)),
stand_cos_aspect = getValues(rastercovs$summer$stand_cos_aspect),
stand_sin_aspect = getValues(rastercovs$summer$stand_sin_aspect),
stand_elevation = getValues(rastercovs$summer$stand_elevation),
stand_slope = getValues(rastercovs$summer$stand_slope),
stand_dist_to_water = getValues(rastercovs$summer$stand_dist_to_water)
)
newdata$altid = factor( 'P003',levels=levels(deer[["summer"]]$altid))
head(newdata)
newdata$veg_class[1:10]
pred1 <- plogis(predict(GLMMs[["summer"]],newdata))     # predict to the full raster for summer range.  Does not take long!
predmaps[["summer"]][["GLMM"]] <- rastercovs$summer$elevation
predmaps[["summer"]][["GLMM"]] <- setValues(predmaps[["summer"]][["GLMM"]],pred1)
plot(predmaps$summer$GLMM)
graphics.off()
plot(predmaps$summer$GLMM)
lenth <- ncell(rastercovs$summer$cos_aspect)
pred2 <- numeric(lenth)
jump = 10000
counter=1
levels(rastercovs$winter$veg_class)
cat_cov <- c("veg_class")
veg_class <- levels(rastercovs$winter$veg_class)
names(veg_class) <- "veg_class"
factor_list <- list(veg_class)
names(factor_list) <- cat_cov
predmaps[["winter"]]
altid<-factor( 'P003',levels=levels(deer[["winter"]]$altid))
add2<-data.frame(altid)
str(add2)
newdata <- data.frame(
cos_aspect = getValues(rastercovs$winter$cos_aspect),
sin_aspect = getValues(rastercovs$winter$sin_aspect),
elevation = as.integer(getValues(rastercovs$winter$elevation)),
slope = as.integer(getValues(rastercovs$winter$slope)),
dist_to_water = getValues(rastercovs$winter$dist_to_water),
veg_class = factor(veg_class$veg_class$classes[match(getValues(rastercovs$winter$veg_class),veg_class$veg_class$ID)],levels=levels(deer$winter$veg_class)),
stand_cos_aspect = getValues(rastercovs$winter$stand_cos_aspect),
stand_sin_aspect = getValues(rastercovs$winter$stand_sin_aspect),
stand_elevation = getValues(rastercovs$winter$stand_elevation),
stand_slope = getValues(rastercovs$winter$stand_slope),
stand_dist_to_water = getValues(rastercovs$winter$stand_dist_to_water)
)
newdata$altid = factor( 'P003',levels=levels(deer[["winter"]]$altid))
head(newdata)
newdata$veg_class[1:10]
pred1 <- plogis(predict(GLMMs[["winter"]],newdata))     # predict to the full raster for winter range.  Does not take long!
predmaps[["winter"]][["GLMM"]] <- rastercovs$winter$elevation
predmaps[["winter"]][["GLMM"]] <- setValues(predmaps[["winter"]][["GLMM"]],pred1)
plot(predmaps[["winter"]][["GLMM"]])
n.folds
season="summer"
type="RF"
plot=F
uniquedeer <- as.character(unique(deer[[season]]$altid))  # list of all unique animals
uniquedeer
ndeer <- length(uniquedeer)  # total number of inds
ndeer
folds_df <- data.frame(
deer = uniquedeer,
fold = rep_len(1:n.folds,ndeer)
)
folds_df <- data.frame(
deer = uniquedeer,
fold = rep_len(1:n.folds,ndeer)
)
folds_df
foldVector <- folds_df$fold[match(as.character(deer[[season]]$altid),folds_df$deer)]
foldVector
predictCols <- which(names(deer[[season]])%in%pred.names)
predictCols
if(type=="RF"){
fullmodel<-RFs[[season]]
}else{
fullmodel <- GLMMs[[season]]
}
fullmodel
type="GLMM"
if(type=="RF"){
fullmodel<-RFs[[season]]
}else{
fullmodel <- GLMMs[[season]]
}
fullmodel
GLMMs
CVresults
counter = 1
n.folds
CVs[["GLMM"]]
CVs[["GLMM"]]$summer
type= "GLMM" #"RF"
season="winter"
PlotPerformance
?PlotPerformance
type= "GLMM" #"RF"
season="winter"
PlotPerformance(CVs[[type]][[season]])
type= "RF" #"RF"
season="winter"
PlotPerformance(CVs[[type]][[season]])
library(Rmisc)
type= "GLMM" #"RF"
season="summer"
type= "GLMM" #"RF"
season="summer"
PlotPerformance(CVs[[type]][[season]])
type= "RF" #"RF"
season="winter"
PlotPerformance(CVs[[type]][[season]])
nrow(deer$summer)
nrow(deer$summer)/2
GLMMs$summer
summary(GLMMs$summer)
