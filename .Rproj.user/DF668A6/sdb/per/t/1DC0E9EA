{
    "collab_server" : "",
    "contents" : "\n##TODO\n\n# Do I have the most recent version of the veg classes?\n\n###############\n## Clear the workspace\n###############\n\nrm(list=ls())\n\n###############\n## Global vars\n###############\n\nSUMMER = TRUE   # FALSE # \n\nWINTER = !SUMMER\n\nMODELSRUN <- TRUE\n\nspatialdir <- \"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\GIS\"\n\n##############\n# Load packages\n###############\n\nlibrary(lme4) #load lme4 package\nlibrary(Hmisc)\nlibrary(MuMIn)\nlibrary(ROCR)\nlibrary(rms)\nlibrary(RColorBrewer)\nlibrary(pROC)    # for running the delong test\n\nlibrary(raster)\nlibrary(rgdal)\nlibrary(prettymapr)\n\n\n################\n# Load functions\n################\n\n#### Read in the RF functions from github\n\n# setwd(\"E:\\\\GIT\\\\Mule_Deer_RFvsRSF\")\n\nsource(\"RF_Extensions.R\")   # change to your script locations (not necessary if cloned from GITHUB)\n\nsource(\"METHODS_PAPER_ALLFUNCTIONS.R\")\n\n################\n## Read in Data\n################\n\nsummerdeer=read.csv('summer_main_modeldata_new25May2017.csv')  # read data file into R\n\nsummerdeer$altid=factor(summerdeer$altid) # convert catagorical variable to a vector of factor variables\nsummerdeer$veg_class=factor(summerdeer$veg_class)\n\nwinterdeer=read.csv('winter data 6_28_17.csv')  # read data file into R  winter_main_modeldata_new5May2017.csv\n\nwinterdeer$altid=factor(winterdeer$altid) # convert catagorical variable to a vector of factor variables\nwinterdeer$veg_class=factor(winterdeer$veg_class)\n\n##############\n# Standardize covariates\n##############\n\nsummerdeer$stand_dist_to_water=(summerdeer$dist_to_water-mean(summerdeer$dist_to_water))/sd(summerdeer$dist_to_water)\nsummerdeer$stand_cos_aspect=(summerdeer$cos_aspect-mean(summerdeer$cos_aspect))/sd(summerdeer$cos_aspect)\nsummerdeer$stand_sin_aspect=(summerdeer$sin_aspect-mean(summerdeer$sin_aspect))/sd(summerdeer$sin_aspect)\nsummerdeer$stand_elevation=(summerdeer$elevation-mean(summerdeer$elevation))/sd(summerdeer$elevation)\nsummerdeer$stand_slope=(summerdeer$slope-mean(summerdeer$slope))/sd(summerdeer$slope)\n\n\nwinterdeer$stand_dist_to_water=(winterdeer$dist_to_water-mean(winterdeer$dist_to_water))/sd(winterdeer$dist_to_water)\nwinterdeer$stand_cos_aspect=(winterdeer$cos_aspect-mean(winterdeer$cos_aspect))/sd(winterdeer$cos_aspect)\nwinterdeer$stand_sin_aspect=(winterdeer$sin_aspect-mean(winterdeer$sin_aspect))/sd(winterdeer$sin_aspect)\nwinterdeer$stand_elevation=(winterdeer$elevation-mean(winterdeer$elevation))/sd(winterdeer$elevation)\nwinterdeer$stand_slope=(winterdeer$slope-mean(winterdeer$slope))/sd(winterdeer$slope)\n\n\nsummerdeer$used_fac=factor(summerdeer$used)\n\nwinterdeer$used_fac=factor(winterdeer$used)\n\ndeer <- list()\n\ndeer[[\"summer\"]] <- summerdeer\ndeer[[\"winter\"]] <- winterdeer\n\nrm(summerdeer,winterdeer)\n\n###############\n# Naming covariables\n###############\n\n############### NAMING VARIABLES ############\n\npredictorNames <- c(  \"Cos Aspect\", # nice readable names\n                      \"Sin Aspect\",\n                      \"Elevation\",\n                      \"Slope\",\n                      \"Vegetation Class\",\n                      \"Distance to Water\"\n)\n\npred.names=c(  \"cos_aspect\",\n               \"sin_aspect\",\n               \"elevation\",\n               \"slope\",\n               \"veg_class\",\n               \"dist_to_water\"\n               \n)\n\n\n#name check\ncbind(pred.names,predictorNames)\n\nstand_pred.names <- paste(\"stand_\",pred.names,sep=\"\")\n\n\n##################\n## Run the generalized linear mixed model\n##################\n\nMODELSRUN <- TRUE\n# setwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\CODE_deprecated\")\n# MODELSRUN <- FALSE\nif(MODELSRUN){\n  load(\"summerGLMM.RData\")\n  load(\"winterGLMM.RData\")\n  \n  GLMMs <- list()\n  GLMMs[[\"winter\"]] <- winterGLMM\n  GLMMs[[\"summer\"]] <- summerGLMM\n  \n  rm(summerGLMM,winterGLMM)\n  \n}else{\n  \n  # ##### GLOBAL MODEL\n  # \n  # summer_pequop_model=glmer(used~stand_dist_to_water+(stand_dist_to_water*stand_elevation)+(stand_dist_to_water*stand_slope)\n  #                           +(stand_elevation*stand_slope)+stand_cos_aspect+stand_sin_aspect\n  #                           +stand_elevation+stand_slope+veg_class+(1|altid),family=\"binomial\",data=deer$summer,nAGQ = 1, na.action=\"na.fail\") # generalized linear mixed effect \n  # \n  # summary(summer_pequop_model)\n  # \n  #      # find the best model using \"dredge\" function\n  # \n  # summer_dred<- dredge(summer_pequop_model, trace = TRUE, rank = \"AICc\", REML = FALSE)\n  # summer_dred\n  # \n  # write.csv(model_summary$coefficients, file= \"top_summer_main_result.csv\")\n  # write.csv(summer_dred, file= \"winter_main_dredge_result.csv\")\n  \n       # run the BEST MODELS (after model selection; see below)\n  \n  summerGLMM=glmer(used~stand_dist_to_water + stand_cos_aspect +\n                              stand_elevation + stand_slope + veg_class + stand_elevation:stand_slope +\n                              stand_dist_to_water:stand_slope + \n                              (1|altid), family=\"binomial\", data=deer[[\"summer\"]],na.action=\"na.fail\") # generalized linear mixed effect\n  \n  winterGLMM=glmer(used~stand_dist_to_water + stand_cos_aspect +\n                              stand_elevation + stand_slope + veg_class +  stand_elevation:stand_slope +\n                              stand_dist_to_water:stand_slope + stand_dist_to_water:stand_elevation +\n                              (1|altid), family=\"binomial\", data=deer[[\"winter\"]],na.action=\"na.fail\") # generalized linear mixed effect \n                           \n    \n  GLMMs <- list()\n  GLMMs[[\"winter\"]] <- winterGLMM\n  GLMMs[[\"summer\"]] <- summerGLMM\n  \n  # summary(summer_pequop_final)\n  save(summerGLMM,file = \"summerGLMM.RData\")\n  save(winterGLMM,file = \"winterGLMM.RData\")\n  \n  rm(summerGLMM,winterGLMM)\n}\n\n##################\n## Run the Random Forest model\n##################\n\n#### Define response variable and formula\n\nresponse=\"used_fac\" \n\nformula1 <- as.formula(paste(response,\"~\",paste(pred.names,collapse=\"+\")))\n\n#### Define the RF settings\n\ncforestControl <- cforest_unbiased(ntree=500,mtry=3)   # change back to 500!!\ncforestControl@fraction <- 0.03\n\n#### Define our formula (response ~ predictors)\n\n#   MODELSRUN <- FALSE\nif(MODELSRUN){\n  load(\"summerRF.RData\")\n  load(\"winterRF.RData\")\n  \n  RFs <- list()\n  RFs[[\"winter\"]] <- winterRF\n  RFs[[\"summer\"]] <- summerRF\n  RFs[[\"winter_importance\"]] <- winter_importance\n  RFs[[\"summer_importance\"]] <- summer_importance\n  \n  rm(summerRF,summer_importance,winterRF,winter_importance)\n  \n}else{\n  \n  summerRF <- cforest(formula1, controls=cforestControl, data=deer[[\"summer\"]])\n  # get the importance values\n  summer_importance<-varimp((summerRF), conditional= FALSE)\n  \n  \n  winterRF <- cforest(formula1, controls=cforestControl, data=deer[[\"winter\"]])\n  # get the importance values\n  winter_importance<-varimp((winterRF), conditional= FALSE)\n  \n  RFs <- list()\n  RFs[[\"winter\"]] <- winterRF\n  RFs[[\"summer\"]] <- summerRF\n  RFs[[\"winter_importance\"]] <- winter_importance\n  RFs[[\"summer_importance\"]] <- summer_importance\n  \n  # summary(summer_pequop_final)\n  save(summerRF,summer_importance,file = \"summerRF.RData\")\n  save(winterRF,winter_importance,file = \"winterRF.RData\")\n  \n  rm(summerRF,summer_importance,winterRF,winter_importance)\n}\n\n\n#   MODELSRUN <- TRUE\n\n\n#######################\n# Visualize importance values\n#######################\n\ngraphics.off()\n\nsvg(\"importancefig2.svg\",height=7,width=7)\n\npar(mfcol=c(2,2))\npar(mai=c(1,1.5,0.6,0.4))\nlengthndx <- length(RFs[[impname]])\ncol <- rainbow(lengthndx, start = 3/6, end = 4/6)      # rep(brewer.pal(6,\"Blues\"),each=2)\n\n\nseason <- \"summer\"\nimpname <- sprintf(\"%s_importance\",season)\n\nbarplot(height=RFs[[impname]][order(RFs[[impname]],decreasing = FALSE)],\n        horiz=T,las=1,main=\"Importance of Predictors, RF\",\n        xlab=\"Index of overall importance\",col=col,           \n        names.arg=predictorNames[match(names(RFs[[impname]]),pred.names)][order(RFs[[impname]],decreasing = FALSE)])\n\n\nseason <- \"winter\"\nimpname <- sprintf(\"%s_importance\",season)\n\n\n\nbarplot(height=RFs[[impname]][order(RFs[[impname]],decreasing = FALSE)],\n        horiz=T,las=1,main=\"Importance of Predictors, RF\",\n        xlab=\"Index of overall importance\",col=col,           \n        names.arg=predictorNames[match(names(RFs[[impname]]),pred.names)][order(RFs[[impname]],decreasing = FALSE)])\n\n\n##########\n# GLM \"importance\"? (coefficients of standardized variables?)\n##########\n\nseason=\"summer\"\nsumm <- summary(GLMMs[[season]])\n\nallvars <- names(summ$coefficients[,1])\n\n# remove interactions\nallvars <- allvars[-grep(\":\",allvars)]\n\n# keep the standardized vars\n\nallvars <- allvars[grep(\"stand\",allvars)]\n\nglm_importance <- summ$coefficients[,1][allvars]\n\n#glm_importance <- glm_importance[order(abs(glm_importance),decreasing = T)]\n\nbarplot(height=glm_importance[order(abs(glm_importance),decreasing = FALSE)],\n        horiz=T,las=1,main=\"Standardized coefficients, GLMM\",\n        xlab=\"Standardized coefficient\",col=col,           \n        names.arg=predictorNames[match(names(glm_importance),stand_pred.names)][order(abs(glm_importance),decreasing = FALSE)])\n\n\nseason=\"winter\"\nsumm <- summary(GLMMs[[season]])\n\nallvars <- names(summ$coefficients[,1])\n\n    # remove interactions\nallvars <- allvars[-grep(\":\",allvars)]\n\n    # keep the standardized vars\n\nallvars <- allvars[grep(\"stand\",allvars)]\n\nglm_importance <- summ$coefficients[,1][allvars]\n\n#glm_importance <- glm_importance[order(abs(glm_importance),decreasing = T)]\n\nbarplot(height=glm_importance[order(abs(glm_importance),decreasing = FALSE)],\n         horiz=T,las=1,main=\"Standardized coefficients, GLMM\",\n         xlab=\"Standardized coefficient\",col=col,           \n         names.arg=predictorNames[match(names(glm_importance),stand_pred.names)][order(abs(glm_importance),decreasing = FALSE)])\n\n\ndev.off()\n\n## note: comparison of RF vs GLMM \"importance\" values vs regression coefficients of standardized variables for RSF can \n    #  indicate the degree to which nonlinearities and interactions play a role!\n\n## note: RF gives an overall importance of categorical vars, GLMM cannot do that!\n\n\n\n\n#######################\n## Visualize univariate relationships\n#######################\n\npred.names\n\n## NOTE: we need to convert to real scale for the axes (unstandardized)\n\nseason <- \"summer\"\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"cos_aspect\",type=\"GLMM\")\n#VisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"sin_aspect\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"elevation\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"slope\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"veg_class\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"dist_to_water\",type=\"GLMM\")\n\nseason <- \"winter\"\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"cos_aspect\",type=\"GLMM\")\n#VisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"sin_aspect\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"elevation\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"slope\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"veg_class\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"dist_to_water\",type=\"GLMM\")\n\n\nseason=\"summer\"\ngraphics.off()\n\nsvg(\"summerunivarplots2.svg\",6,6)\npar(mfcol=c(3,2))\npar(mai=c(0.8,0.8,0,0))\n\n\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"elevation\",type=\"RF\")\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"slope\",type=\"RF\")\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"dist_to_water\",type=\"RF\")\n\n\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"elevation\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"slope\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"dist_to_water\",type=\"GLMM\")\n\ndev.off()\n\ngraphics.off()\nseason <- \"winter\"\nsvg(\"winterunivariateplots2.svg\",6,6)\n\npar(mfcol=c(3,2))\npar(mai=c(0.8,0.8,0,0))\n\n\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"elevation\",type=\"RF\")\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"slope\",type=\"RF\")\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"dist_to_water\",type=\"RF\")\n\n\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"elevation\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"slope\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"dist_to_water\",type=\"GLMM\")\n\ndev.off()\n\n\ngraphics.off()\nseason=\"summer\"\nsvg(\"vegplots2.svg\",6,6)\n\npar(mfrow=c(2,2))\npar(mai=c(1.5,0.8,0,0))\n\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"veg_class\",type=\"RF\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"veg_class\",type=\"GLMM\")\n\n\n\nseason=\"winter\"\n#svg(\"wintervegplots.svg\",6,5)\n\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"veg_class\",type=\"RF\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"veg_class\",type=\"GLMM\")\n\ndev.off()\n\n#######################\n## Visualize interactions\n########################\n\ngraphics.off()\n\nseason <- \"summer\"\n\n\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"dist_to_water\",var2=\"elevation\")\n\n#VisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"stand_elevation\",var2=\"stand_dist_to_water\")\n\n#VisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"stand_slope\",var2=\"stand_dist_to_water\")\n\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var2=\"slope\",var1=\"dist_to_water\")\n\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"slope\",var2=\"elevation\")\n\n\n\nseason <- \"winter\"\n\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"dist_to_water\",var2=\"elevation\")\n\n#VisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"stand_elevation\",var2=\"stand_dist_to_water\")\n\n#VisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"stand_slope\",var2=\"stand_dist_to_water\")\n\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var2=\"slope\",var1=\"dist_to_water\")\n\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"slope\",var2=\"elevation\")\n\n#VisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"stand_slope\",var2=\"stand_elevation\")\n\n\ngraphics.off()\nsvg(\"disttowater_vs_elevation2.svg\",6,6)\npar(mfrow=c(2,2))\n\nseason <- \"summer\"\nVisualizeInteraction(data=deer[[season]],model=RFs[[season]],var1=\"dist_to_water\",var2=\"elevation\",type=\"RF\")\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"dist_to_water\",var2=\"elevation\",type=\"GLMM\")\n\n\nseason <- \"winter\"\nVisualizeInteraction(data=deer[[season]],model=RFs[[season]],var1=\"dist_to_water\",var2=\"elevation\",type=\"RF\")\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"dist_to_water\",var2=\"elevation\",type=\"GLMM\")\n\ndev.off()\n\n\ngraphics.off()\nsvg(\"slope_vs_elevation2.svg\",6,6)\npar(mfrow=c(2,2))\n\nseason <- \"summer\"\nVisualizeInteraction(data=deer[[season]],model=RFs[[season]],var1=\"slope\",var2=\"elevation\",type=\"RF\")\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"slope\",var2=\"elevation\",type=\"GLMM\")\n\n\nseason <- \"winter\"\nVisualizeInteraction(data=deer[[season]],model=RFs[[season]],var1=\"slope\",var2=\"elevation\",type=\"RF\")\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"slope\",var2=\"elevation\",type=\"GLMM\")\n\ndev.off()\n\n\n#################\n# MODEL SELECTION: GLMM\n#################\n\nif(!MODELSRUN){\n  \n  #### Summer Global model\n  \n  summer_pequop_model=glmer(used~stand_dist_to_water +\n                              stand_cos_aspect + \n                              stand_sin_aspect +\n                              stand_elevation +\n                              stand_slope +\n                              veg_class +\n                              stand_dist_to_water:stand_elevation + \n                              stand_dist_to_water:stand_slope +\n                              stand_elevation:stand_slope + \n                              (1|altid),\n              family=\"binomial\",data=deer$summer,nAGQ = 1, na.action=\"na.fail\") # generalized linear mixed effect \n  \n  \n  summer_dred <- dredge(summer_pequop_model, trace = TRUE, rank = \"AICc\", REML = FALSE)\n  summer_dred\n  \n  model_summary_summer <- summary(summer_pequop_model)\n  \n  write.csv(model_summary_summer$coefficients, file= \"top_summer_main_result19April2017.csv\")\n  write.csv(summer_dred, file= \"summer_main_dredge_result_10April2017.csv\")\n  \n  \n  #### Winter Global model\n  \n  winter_pequop_model=glmer(used~stand_dist_to_water +\n                              stand_cos_aspect + \n                              stand_sin_aspect +\n                              stand_elevation +\n                              stand_slope +\n                              veg_class +\n                              stand_dist_to_water:stand_elevation + \n                              stand_dist_to_water:stand_slope +\n                              stand_elevation:stand_slope + \n                              (1|altid),\n                            family=\"binomial\",data=deer$winter,nAGQ = 1, na.action=\"na.fail\") # generalized linear mixed effect \n  \n  model_summary_winter <- summary(winter_pequop_model)\n  \n  winter_dred<- dredge(winter_pequop_model, trace = TRUE, rank = \"AICc\", REML = FALSE)\n  winter_dred\n  \n  write.csv(model_summary_winter$coefficients, file= \"top_winter_main_result19April2017.csv\")\n  write.csv(winter_dred, file= \"winter_main_dredge_result_10April2017.csv\")\n  \n\n}\n\n\n######################\n# RF Interactions (can take very long time!)\n######################\n\nRF_int <- list()\n\nseason <- \"summer\"\n\n# NOTE: this one can take a very long time   ...\nRF_int[[season]] <- RF_FindInteractions(object=RFs[[season]],data=deer[[season]],predictors=pred.names)\n\n### plot interaction strength\ngraphics.off()\nlengthndx <- min(9,nrow(RF_int[[season]]$rank.list1))\npar(mai=c(0.95,3.1,0.6,0.4))\n#ndx <- ndx <- which(predictors%in%pred.names)\nbarplot(height=(RF_int[[season]]$rank.list1[c(1:min(9,nrow(RF_int[[season]]$rank.list1))),5][c(lengthndx:1)]),\n        horiz=T,las=1,main=paste(response, sep=\"\"),\n        xlab=\"Index of interaction strength\",col=brewer.pal(lengthndx,\"Blues\"),           \n        names.arg=paste(\"\",predictorNames[match(RF_int[[season]]$rank.list1[,2][c(lengthndx:1)],pred.names)],\"\\n\",predictorNames[match(RF_int[[season]]$rank.list1[,4][c(lengthndx:1)],pred.names)],sep=\"\") )\n\nRF_int[[season]]$rank.list1\n\nseason <- \"winter\"\n\n# NOTE: this one can take a very long time   ...\nRF_int[[season]] <- RF_FindInteractions(object=RFs[[season]],data=deer[[season]],predictors=pred.names)\n\n### plot interaction strength\ngraphics.off()\nlengthndx <- min(9,nrow(RF_int[[season]]$rank.list1))\npar(mai=c(0.95,3.1,0.6,0.4))\n#ndx <- ndx <- which(predictors%in%pred.names)\nbarplot(height=(RF_int[[season]]$rank.list1[c(1:min(9,nrow(RF_int[[season]]$rank.list1))),5][c(lengthndx:1)]),\n        horiz=T,las=1,main=paste(response, sep=\"\"),\n        xlab=\"Index of interaction strength\",col=brewer.pal(lengthndx,\"Blues\"),           \n        names.arg=paste(\"\",predictorNames[match(RF_int[[season]]$rank.list1[,2][c(lengthndx:1)],pred.names)],\"\\n\",predictorNames[match(RF_int[[season]]$rank.list1[,4][c(lengthndx:1)],pred.names)],sep=\"\") )\n\nRF_int[[season]]$rank.list1\n\n\n\n##### PLOT EXAMPLE CONDITIONAL INFERENCE TREE  ##################\n\nseason=\"winter\"\n\nsummer_deer <- ctree(formula=formula1, data=df, controls = ctree_control(mincriterion = 0.99,maxdepth = 4))\n\nplot(summer_deer)\n\nsummary(summer_deer)\n\n\n\n##################\n## CROSS VALIDATION\n##################\n\nCVsRun <- TRUE\n\nif(CVsRun){\n  \n  # setwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\CODE_deprecated\")\n  load(\"CVs2.RData\")\n  \n}else{\n  CVs <- list()\n  \n  CVs[[\"GLMM\"]] <- list()\n  CVs[[\"RF\"]] <- list()\n  \n  uniquedeer <- as.character(unique(deer[[season]]$altid))\n  n.folds <- length(uniquedeer)\n  \n  type= \"GLMM\" #\"RF\"\n  season=\"summer\"\n  CVs[[type]][[season]] <- CrossValidateByDeer(n.folds=length(unique(deer[[season]]$altid)),season=season,type=type,plot=F)\n  \n  type= \"GLMM\" #\"RF\"\n  season=\"winter\"\n  CVs[[type]][[season]] <- CrossValidateByDeer(n.folds=length(unique(deer[[season]]$altid)),season=season,type=type,plot=F)\n  \n  type= \"RF\" #\"RF\"\n  season=\"summer\"\n  CVs[[type]][[season]] <- CrossValidateByDeer(n.folds=length(unique(deer[[season]]$altid)),season=season,type=type,plot=F)\n  \n  type= \"RF\" #\"RF\"\n  season=\"winter\"\n  CVs[[type]][[season]] <- CrossValidateByDeer(n.folds=n.folds,season=season,type=type,plot=F)\n  \n  ## Save CV objects\n  # setwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\CODE_deprecated\")\n  \n  save(CVs,file = \"CVs2.RData\")\n  \n}\n\ntype= \"GLMM\" #\"RF\"\nseason=\"summer\"\nPlotPerformance(CVs[[type]][[season]])\n\ntype= \"GLMM\" #\"RF\"\nseason=\"winter\"\nPlotPerformance(CVs[[type]][[season]])\n\ntype= \"RF\" #\"RF\"\nseason=\"summer\"\nPlotPerformance(CVs[[type]][[season]])\n\ntype= \"RF\" #\"RF\"\nseason=\"winter\"\nPlotPerformance(CVs[[type]][[season]])\n\n######################\n# run the Delong test\n######################\n\n?roc.test\n\n### summer\nseason=\"summer\"\nroc1 <- roc(CVs$GLMM[[season]]$observed,CVs$GLMM[[season]]$CVpred)\nroc2 <- roc(CVs$RF[[season]]$observed,CVs$RF[[season]]$CVpred)\nroc.test(roc1, roc2)\n\n### winter\nseason=\"winter\"\nroc1 <- roc(CVs$GLMM[[season]]$observed,CVs$GLMM[[season]]$CVpred)\nroc2 <- roc(CVs$RF[[season]]$observed,CVs$RF[[season]]$CVpred)\nroc.test(roc1, roc2)\n\n\n###################\n## DO SPATIAL PROJECTIONS\n###################\n\nsetwd(spatialdir)\n\nrastercovs <- list()\n\nrastercovs[[\"winter\"]] <- list()\nrastercovs[[\"summer\"]] <- list()\n\n##########\n# READ IN GIS DATA\n##########\n\n## summer cosine\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\GIS\\\\Rasters\\\\summer_cos\")\nrastercovs[[\"summer\"]][[\"cos_aspect\"]] <- raster(\"w001001.adf\") \n   #rastercovs[[\"summer\"]][[\"cos_aspect\"]] <- trim(rastercovs[[\"summer\"]][[\"cos_aspect\"]]) # note: trim function takes too long to run here..\n#plot(rastercovs[[\"summer\"]][[\"cos_aspect\"]])\n\nold_summer_extent <- extent(rastercovs[[\"summer\"]][[\"cos_aspect\"]])\nsummer_extent <- extent(old_summer_extent@xmin,680000,4580000,4635000)\nrastercovs[[\"summer\"]][[\"cos_aspect\"]] <- crop(rastercovs[[\"summer\"]][[\"cos_aspect\"]],summer_extent)\n#plot(rastercovs[[\"summer\"]][[\"cos_aspect\"]])\n\nrastercovs[[\"summer\"]][[\"cos_aspect\"]] <- trim(rastercovs[[\"summer\"]][[\"cos_aspect\"]])\nsummer_extent <- extent(rastercovs[[\"summer\"]][[\"cos_aspect\"]])   # final extent!\nrastercovs[[\"summer\"]][[\"cos_aspect\"]] <- crop(rastercovs[[\"summer\"]][[\"cos_aspect\"]],summer_extent)\nplot(rastercovs[[\"summer\"]][[\"cos_aspect\"]])\n\nrastercovs[[\"summer\"]][[\"cos_aspect\"]] <- aggregate(rastercovs[[\"summer\"]][[\"cos_aspect\"]], fact=4, fun=modal)\nplot(rastercovs[[\"summer\"]][[\"cos_aspect\"]])\n\nsummer_crs <- rastercovs[[\"summer\"]][[\"cos_aspect\"]]@crs \n\n## summer sine\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\GIS\\\\Rasters\\\\summer_sin\")\nrastercovs[[\"summer\"]][[\"sin_aspect\"]] <- raster(\"w001001.adf\")\nrastercovs[[\"summer\"]][[\"sin_aspect\"]] <- crop(rastercovs[[\"summer\"]][[\"sin_aspect\"]],summer_extent)\nrastercovs[[\"summer\"]][[\"sin_aspect\"]] <- aggregate(rastercovs[[\"summer\"]][[\"sin_aspect\"]], fact=4, fun=modal)\nplot(rastercovs[[\"summer\"]][[\"sin_aspect\"]])\n\n## summer elevation\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\GIS\\\\Rasters\\\\summer_elev\")\nrastercovs[[\"summer\"]][[\"elevation\"]] <- raster(\"w001001.adf\")\nrastercovs[[\"summer\"]][[\"elevation\"]] <- crop(rastercovs[[\"summer\"]][[\"elevation\"]],summer_extent)\nrastercovs[[\"summer\"]][[\"elevation\"]] <- aggregate(rastercovs[[\"summer\"]][[\"elevation\"]], fact=4, fun=modal)\nplot(rastercovs[[\"summer\"]][[\"elevation\"]])\n\n## summer slope\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\GIS\\\\Rasters\\\\summer_slope\")\nrastercovs[[\"summer\"]][[\"slope\"]] <- raster(\"w001001.adf\")\nrastercovs[[\"summer\"]][[\"slope\"]] <- crop(rastercovs[[\"summer\"]][[\"slope\"]],summer_extent)\nrastercovs[[\"summer\"]][[\"slope\"]] <- aggregate(rastercovs[[\"summer\"]][[\"slope\"]], fact=4, fun=modal)\nplot(rastercovs[[\"summer\"]][[\"slope\"]])\n\n## summer dist to water\nsetwd(spatialdir)\nrastercovs[[\"summer\"]][[\"dist_to_water\"]] <- raster(\"Summer_H20.tif\")\nrastercovs[[\"summer\"]][[\"dist_to_water\"]] <- crop(rastercovs[[\"summer\"]][[\"dist_to_water\"]],summer_extent)\nrastercovs[[\"summer\"]][[\"dist_to_water\"]] <- aggregate(rastercovs[[\"summer\"]][[\"dist_to_water\"]], fact=4, fun=modal)\n#extent(rastercovs[[\"summer\"]][[\"dist_to_water\"]]) <- summer_extent \nrastercovs[[\"summer\"]][[\"dist_to_water\"]] <- projectRaster(rastercovs[[\"summer\"]][[\"dist_to_water\"]],rastercovs[[\"summer\"]][[\"slope\"]])\nplot(rastercovs[[\"summer\"]][[\"dist_to_water\"]])\n\n## summer veg\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\GIS\\\\Summer_veg_raster\\\\Summer_veg_raster\")\nrastercovs[[\"summer\"]][[\"veg_class\"]] <- raster(\"summer_veg.tif\")\nrastercovs[[\"summer\"]][[\"veg_class\"]] <- crop(rastercovs[[\"summer\"]][[\"veg_class\"]],summer_extent)\nattrib <- rastercovs[[\"summer\"]][[\"veg_class\"]]@data@attributes\ntarget <- levels(deer$summer$veg_class)\nsubs <- attrib[[1]][,c(\"Value\",\"Habitat_Type\")]\nsubs$HabType2 <- c(\"Riparian\",\"PJ\",\"mtn_mahog\",\"asage\",\"intro_grass\",\"grassland\",\"shb_mead\",\"roads\",\"desert_scrub\",\"Dec_shrub\",\"aspen\",\"NA\")\nhabitats <- attrib[[1]]$Habitat_Type\nis.factor(rastercovs[[\"summer\"]][[\"veg_class\"]])\nrastercovs[[\"summer\"]][[\"veg_class\"]] <- aggregate(rastercovs[[\"summer\"]][[\"veg_class\"]], fact=4, fun=modal)\nrastercovs[[\"summer\"]][[\"veg_class\"]] <- projectRaster(rastercovs[[\"summer\"]][[\"veg_class\"]],rastercovs[[\"summer\"]][[\"slope\"]],method=\"ngb\")\nrastercovs[[\"summer\"]][[\"veg_class\"]] <- ratify(rastercovs[[\"summer\"]][[\"veg_class\"]])\nrat <- levels(rastercovs[[\"summer\"]][[\"veg_class\"]])[[1]]\nrat$landcover <- subs$HabType2\nrat$code <- subs$Habitat_Type\ntemp <- subs\nnames(temp)[1] <- \"ID\"\nlevels(rastercovs[[\"summer\"]][[\"veg_class\"]]) <- temp  #rat\n\n#rastercovs[[\"summer\"]][[\"veg_class\"]]@data@attributes <- attrib\nunique(rastercovs$summer$veg_class@data@values)\n\n# rastercovs[[\"summer\"]][[\"veg_class\"]] <- reclassify(rastercovs[[\"summer\"]][[\"veg_class\"]],rcl=c(46,48,NA)) \n# rastercovs[[\"summer\"]][[\"veg_class\"]] <- subs(rastercovs[[\"summer\"]][[\"veg_class\"]],subs[,c(\"Value\",\"HabType2\")],by=1,which=2)\n# rastercovs[[\"summer\"]][[\"veg_class\"]] <- as.factor(rastercovs[[\"summer\"]][[\"veg_class\"]])\nplot(rastercovs[[\"summer\"]][[\"veg_class\"]])\n\nres(rastercovs[[\"summer\"]][[\"veg_class\"]])\n\n#########\n# WINTER!\n#########\n\n## winter cosine\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\GIS\\\\Rasters\")\nrastercovs[[\"winter\"]][[\"cos_aspect\"]] <- raster(\"Winter_Cos2.tif\") \n#rastercovs[[\"winter\"]][[\"cos_aspect\"]] <- trim(rastercovs[[\"winter\"]][[\"cos_aspect\"]]) # note: trim function takes too long to run here..\nplot(rastercovs[[\"winter\"]][[\"cos_aspect\"]])\n\n# dpath<-\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\GIS\\\\Rasters\\\\winter_cos\\\\w001001.adf\" \n# x <- new(\"GDALReadOnlyDataset\", dpath) \n# getDriver(x) \n# getDriverLongName(getDriver(x)) \n\nrastercovs[[\"winter\"]][[\"cos_aspect\"]] <- trim(rastercovs[[\"winter\"]][[\"cos_aspect\"]])\nwinter_extent <- extent(rastercovs[[\"winter\"]][[\"cos_aspect\"]])   # final extent!\nrastercovs[[\"winter\"]][[\"cos_aspect\"]] <- crop(rastercovs[[\"winter\"]][[\"cos_aspect\"]],winter_extent)\nplot(rastercovs[[\"winter\"]][[\"cos_aspect\"]])\n\nrastercovs[[\"winter\"]][[\"cos_aspect\"]] <- aggregate(rastercovs[[\"winter\"]][[\"cos_aspect\"]], fact=4, fun=modal)\nplot(rastercovs[[\"winter\"]][[\"cos_aspect\"]])\n\n## winter sine  ## DOESN'T WORK\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\GIS\\\\Rasters\")\nrastercovs[[\"winter\"]][[\"sin_aspect\"]] <- raster(\"Winter_Sin2.tif\")\nrastercovs[[\"winter\"]][[\"sin_aspect\"]] <- crop(rastercovs[[\"winter\"]][[\"sin_aspect\"]],winter_extent)\nrastercovs[[\"winter\"]][[\"sin_aspect\"]] <- aggregate(rastercovs[[\"winter\"]][[\"sin_aspect\"]], fact=4, fun=modal)\nplot(rastercovs[[\"winter\"]][[\"sin_aspect\"]])\n\n## winter elevation\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\GIS\\\\Rasters\\\\winter_elev\")\nrastercovs[[\"winter\"]][[\"elevation\"]] <- raster(\"w001001.adf\")\nrastercovs[[\"winter\"]][[\"elevation\"]] <- crop(rastercovs[[\"winter\"]][[\"elevation\"]],winter_extent)\nrastercovs[[\"winter\"]][[\"elevation\"]] <- aggregate(rastercovs[[\"winter\"]][[\"elevation\"]], fact=4, fun=modal)\nrastercovs[[\"winter\"]][[\"elevation\"]] <- projectRaster(rastercovs[[\"winter\"]][[\"elevation\"]],rastercovs[[\"winter\"]][[\"sin_aspect\"]])\nplot(rastercovs[[\"winter\"]][[\"elevation\"]])\n\n## winter slope \nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\GIS\\\\Rasters\")\nrastercovs[[\"winter\"]][[\"slope\"]] <- raster(\"Winter_Slope2.tif\")\nrastercovs[[\"winter\"]][[\"slope\"]] <- crop(rastercovs[[\"winter\"]][[\"slope\"]],winter_extent)\nrastercovs[[\"winter\"]][[\"slope\"]] <- aggregate(rastercovs[[\"winter\"]][[\"slope\"]], fact=4, fun=modal)\nplot(rastercovs[[\"winter\"]][[\"slope\"]])\n\n## winter dist to water\nsetwd(spatialdir)\nrastercovs[[\"winter\"]][[\"dist_to_water\"]] <- raster(\"Winter_H2O.tif\")\nrastercovs[[\"winter\"]][[\"dist_to_water\"]] <- crop(rastercovs[[\"winter\"]][[\"dist_to_water\"]],winter_extent)\nrastercovs[[\"winter\"]][[\"dist_to_water\"]] <- aggregate(rastercovs[[\"winter\"]][[\"dist_to_water\"]], fact=4, fun=modal)\nplot(rastercovs[[\"winter\"]][[\"dist_to_water\"]])\n\n## winter veg\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\GIS\\\\Winter_veg_raster\\\\Winter_veg_raster\")\nrastercovs[[\"winter\"]][[\"veg_class\"]] <- raster(\"winter_veg.tif\")\nrastercovs[[\"winter\"]][[\"veg_class\"]] <- crop(rastercovs[[\"winter\"]][[\"veg_class\"]],winter_extent)\nattrib <- rastercovs[[\"winter\"]][[\"veg_class\"]]@data@attributes\ntarget <- levels(deer$winter$veg_class)\nsubs <- attrib[[1]][,c(\"ID\",\"HABITAT_TYPE\")]\nsubs$HabType2 <- c(\"Riparian\",\"Fir_forest\",\"PJ\",\"mtn_mahog\",\"asage\",\"grssland\")\nhabitats <- rastercovs[[\"winter\"]][[\"veg_class\"]]@data@attributes[[1]]$HABITAT_TYPE\nis.factor(rastercovs[[\"winter\"]][[\"veg_class\"]])\nrastercovs[[\"winter\"]][[\"veg_class\"]] <- aggregate(rastercovs[[\"winter\"]][[\"veg_class\"]], fact=4, fun=modal)\nrastercovs[[\"winter\"]][[\"veg_class\"]] <- projectRaster(rastercovs[[\"winter\"]][[\"veg_class\"]],rastercovs[[\"winter\"]][[\"slope\"]],method=\"ngb\")\nrastercovs[[\"winter\"]][[\"veg_class\"]] <- ratify(rastercovs[[\"winter\"]][[\"veg_class\"]])\nrat <- levels(rastercovs[[\"winter\"]][[\"veg_class\"]])[[1]]\nrat$landcover <- subs$HabType2\nrat$code <- subs$Habitat_Type\nlevels(rastercovs[[\"winter\"]][[\"veg_class\"]]) <- rat\n\nres(rastercovs[[\"winter\"]][[\"veg_class\"]])\n\n\n###############\n# Further GIS data processing\n###############\n\nrastercovs$summer <- stack(rastercovs$summer)   # done\nrastercovs$winter <- stack(rastercovs$winter)   # done\n\nplot(rastercovs$summer)\nplot(rastercovs$winter)\n\n\n###############\n# Make prediction for summer habitat using GLMM \n###############\n\n#GLMMs[[\"summer\"]]\n\nrastercovs$summer$stand_cos_aspect <- (rastercovs$summer$cos_aspect- mean(deer$summer$cos_aspect))/sd(deer$summer$cos_aspect)\nplot(rastercovs$summer$stand_cos_aspect)\n\nrastercovs$summer$stand_sin_aspect <- (rastercovs$summer$sin_aspect- mean(deer$summer$sin_aspect))/sd(deer$summer$sin_aspect)\n\nrastercovs$summer$stand_elevation <- (rastercovs$summer$elevation- mean(deer$summer$elevation))/sd(deer$summer$elevation)\n\nrastercovs$summer$stand_slope <- (rastercovs$summer$slope- mean(deer$summer$slope))/sd(deer$summer$slope)\n\nrastercovs$summer$stand_dist_to_water <- (rastercovs$summer$dist_to_water- mean(deer$summer$dist_to_water))/sd(deer$summer$dist_to_water)\n\nrat <- levels(rastercovs[[\"summer\"]][[\"veg_class\"]])[[1]]\nis.factor(rastercovs$summer$veg_class)\nrat$classes <- rat$landcover\nlevels(rastercovs$summer$veg_class) <- rat[,c(\"ID\",\"classes\")]\n\n#save(predmaps,file = \"PredMaps.RData\")\n\npredmaps <- list()\npredmaps[[\"summer\"]] <- list()\n\ncat_cov <- c(\"veg_class\")\nveg_class <- levels(rastercovs$summer$veg_class)\nnames(veg_class) <- \"veg_class\"\n\nfactor_list <- list(veg_class)\nnames(factor_list) <- cat_cov\n\naltid<-factor( 'P003',levels=levels(deer[[\"summer\"]]$altid))\nadd2<-data.frame(altid)\nstr(add2)\n\n# predmaps[[\"summer\"]][[\"GLMM\"]]  <- raster::predict(object=rastercovs$summer,model=GLMMs[[\"summer\"]],const=add2,type=\"prob\",factors=levels(rastercovs$summer$veg_class))  # factor_list progress='text',factors=factor_list,\n# \n# \n# \n# predmaps[[\"summer\"]][[\"RF\"]]  <- raster::predict(object=rastercovs$summer,model=RFs[[\"summer\"]])  # factors=factor_list\n\n#### can't seem to use predict function- need to use another strategy...\n\nnewdata <- data.frame(\n  cos_aspect = getValues(rastercovs$summer$cos_aspect),\n  sin_aspect = getValues(rastercovs$summer$sin_aspect),\n  elevation = as.integer(getValues(rastercovs$summer$elevation)),\n  slope = as.integer(getValues(rastercovs$summer$slope)),\n  dist_to_water = getValues(rastercovs$summer$dist_to_water),\n  veg_class = factor(veg_class$veg_class$HabType2[match(getValues(rastercovs$summer$veg_class),veg_class$veg_class$ID)],levels=levels(deer$summer$veg_class)),\n  stand_cos_aspect = getValues(rastercovs$summer$stand_cos_aspect),\n  stand_sin_aspect = getValues(rastercovs$summer$stand_sin_aspect),\n  stand_elevation = getValues(rastercovs$summer$stand_elevation),\n  stand_slope = getValues(rastercovs$summer$stand_slope),\n  stand_dist_to_water = getValues(rastercovs$summer$stand_dist_to_water)\n)\n\nnewdata$altid = factor( 'P003',levels=levels(deer[[\"summer\"]]$altid))\n\nhead(newdata)\n\nnewdata$veg_class[1:10]\n\n## deal with NAs?\n\npred1 <- plogis(predict(GLMMs[[\"summer\"]],newdata))     # predict to the full raster for summer range.  Does not take long!\npredmaps[[\"summer\"]][[\"GLMM\"]] <- rastercovs$summer$elevation\npredmaps[[\"summer\"]][[\"GLMM\"]] <- setValues(predmaps[[\"summer\"]][[\"GLMM\"]],pred1) \n\nplot(predmaps$summer$GLMM)\n\nlenth <- ncell(rastercovs$summer$cos_aspect)\npred2 <- numeric(lenth)\njump = 10000\ncounter=1\n\nwhile(counter<lenth){\n  pred2[counter:min((counter+jump-1),lenth)] <- matrix(unlist(predict(RFs[[\"summer\"]],newdata[counter:min((counter+jump-1),lenth),],type=\"prob\",OOB=TRUE)),ncol=2,byrow=T)[,2]   # this takes a lot longer... OOB=TRUE,\n  counter=counter+jump\n  cat(sprintf(\"%d ...\",counter-1))\n}\n\n\n\n #pred2 <- matrix(unlist(predict(RFs[[\"summer\"]],newdata[1:5,],type=\"prob\",OOB=TRUE)),ncol=2,byrow=T)[,2]   # this takes a lot longer... \npredmaps[[\"summer\"]][[\"RF\"]] <- rastercovs$summer$elevation\npredmaps[[\"summer\"]][[\"RF\"]] <- setValues(predmaps[[\"summer\"]][[\"RF\"]],pred2)\n\n\n###############\n# Make prediction for winter habitat using GLMM \n###############\n\n#GLMMs[[\"winter\"]]\n\nrastercovs$winter$stand_cos_aspect <- (rastercovs$winter$cos_aspect- mean(deer$winter$cos_aspect))/sd(deer$winter$cos_aspect)    # something strange here...\nplot(rastercovs$winter$stand_cos_aspect)\n\nrastercovs$winter$stand_sin_aspect <- (rastercovs$winter$sin_aspect- mean(deer$winter$sin_aspect))/sd(deer$winter$sin_aspect)\n\nrastercovs$winter$stand_elevation <- (rastercovs$winter$elevation- mean(deer$winter$elevation))/sd(deer$winter$elevation)\n\nrastercovs$winter$stand_slope <- (rastercovs$winter$slope- mean(deer$winter$slope))/sd(deer$winter$slope)\n\nrastercovs$winter$stand_dist_to_water <- (rastercovs$winter$dist_to_water- mean(deer$winter$dist_to_water))/sd(deer$winter$dist_to_water)\n\nis.factor(rastercovs$winter$veg_class)\nrat$classes <- rat$landcover\nlevels(rastercovs$winter$veg_class) <- rat[,c(\"ID\",\"classes\")]\n\npredmaps[[\"winter\"]] <- list()\n\ncat_cov <- c(\"veg_class\")\nveg_class <- levels(rastercovs$winter$veg_class)\nnames(veg_class) <- \"veg_class\"\n\nfactor_list <- list(veg_class)\nnames(factor_list) <- cat_cov\n\naltid<-factor( 'P003',levels=levels(deer[[\"winter\"]]$altid))\nadd2<-data.frame(altid)\nstr(add2)\n\n# predmaps[[\"winter\"]][[\"GLMM\"]]  <- raster::predict(object=rastercovs$winter,model=GLMMs[[\"winter\"]],const=add2,type=\"prob\",factors=levels(rastercovs$winter$veg_class))  # factor_list progress='text',factors=factor_list,\n# \n# \n# \n# predmaps[[\"winter\"]][[\"RF\"]]  <- raster::predict(object=rastercovs$winter,model=RFs[[\"winter\"]])  # factors=factor_list\n\n\n#### can't seem to use predict function- need to use another strategy...\n\nnewdata <- data.frame(\n  cos_aspect = getValues(rastercovs$winter$cos_aspect),\n  sin_aspect = getValues(rastercovs$winter$sin_aspect),\n  elevation = as.integer(getValues(rastercovs$winter$elevation)),\n  slope = as.integer(getValues(rastercovs$winter$slope)),\n  dist_to_water = getValues(rastercovs$winter$dist_to_water),\n  veg_class = factor(veg_class$veg_class$classes[match(getValues(rastercovs$winter$veg_class),veg_class$veg_class$ID)],levels=levels(deer$winter$veg_class)),\n  stand_cos_aspect = getValues(rastercovs$winter$stand_cos_aspect),\n  stand_sin_aspect = getValues(rastercovs$winter$stand_sin_aspect),\n  stand_elevation = getValues(rastercovs$winter$stand_elevation),\n  stand_slope = getValues(rastercovs$winter$stand_slope),\n  stand_dist_to_water = getValues(rastercovs$winter$stand_dist_to_water)\n)\n\nnewdata$altid = factor( 'P003',levels=levels(deer[[\"winter\"]]$altid))\n\nhead(newdata)\n\nnewdata$veg_class[1:10]\n\n\n## deal with NAs?\n\npred1 <- plogis(predict(GLMMs[[\"winter\"]],newdata))     # predict to the full raster for winter range.  Does not take long!\npredmaps[[\"winter\"]][[\"GLMM\"]] <- rastercovs$winter$elevation\npredmaps[[\"winter\"]][[\"GLMM\"]] <- setValues(predmaps[[\"winter\"]][[\"GLMM\"]],pred1) \n\nplot(predmaps[[\"winter\"]][[\"GLMM\"]])\n\nlenth <- ncell(rastercovs$winter$cos_aspect)\npred2 <- numeric(lenth)\njump = 5000\ncounter=1\n\nwhile(counter<lenth){\n  pred2[counter:min((counter+jump-1),lenth)] <- matrix(unlist(predict(RFs[[\"winter\"]],newdata[counter:min((counter+jump-1),lenth),],type=\"prob\",OOB=TRUE)),ncol=2,byrow=T)[,2]   # this takes a lot longer... OOB=TRUE,\n  counter=counter+jump\n  cat(sprintf(\"%d ...\",counter-1))\n}\n\n  #pred2 <- matrix(unlist(predict(RFs[[\"winter\"]],newdata[1:5,],type=\"prob\",OOB=TRUE)),ncol=2,byrow=T)[,2]   # this takes a lot longer... \npredmaps[[\"winter\"]][[\"RF\"]] <- rastercovs$winter$elevation\npredmaps[[\"winter\"]][[\"RF\"]] <- setValues(predmaps[[\"winter\"]][[\"RF\"]],pred2)\n\n\n## maps of comparison in predictions between the two methods\n\npredmaps[[\"winter\"]][[\"corLocal\"]] <- corLocal(predmaps[[\"winter\"]][[\"RF\"]],predmaps[[\"winter\"]][[\"GLMM\"]],9)\npredmaps[[\"summer\"]][[\"corLocal\"]] <- corLocal(predmaps[[\"summer\"]][[\"RF\"]],predmaps[[\"summer\"]][[\"GLMM\"]],9)\n\n\n## maps of difference in predictions between the two methods\n\npredmaps[[\"winter\"]][[\"difference\"]] <- predmaps[[\"winter\"]][[\"RF\"]]-predmaps[[\"winter\"]][[\"GLMM\"]]\npredmaps[[\"summer\"]][[\"difference\"]] <- predmaps[[\"summer\"]][[\"RF\"]]-predmaps[[\"summer\"]][[\"GLMM\"]]\n\npredmaps[[\"winter\"]][[\"difference2\"]] <- focal(predmaps[[\"winter\"]][[\"difference\"]], w=matrix(1, 5, 5), mean, na.rm=T)\npredmaps[[\"summer\"]][[\"difference2\"]] <- focal(predmaps[[\"summer\"]][[\"difference\"]], w=matrix(1, 5, 5), mean,na.rm=T)\n\n#focal(x, w=matrix(1, 5, 5), mean)\n\n\npar(mfrow=c(1,2))\nplot(predmaps[[\"winter\"]][[\"RF\"]])\nplot(predmaps[[\"winter\"]][[\"GLMM\"]])\n\n\npar(mfrow=c(1,2))\nplot(predmaps[[\"winter\"]][[\"corLocal\"]])\nplot(predmaps[[\"winter\"]][[\"difference2\"]])\n\npar(mfrow=c(2,1))\nplot(predmaps[[\"summer\"]][[\"RF\"]])\nplot(predmaps[[\"summer\"]][[\"GLMM\"]])\n\npar(mfrow=c(2,1))\nplot(predmaps[[\"summer\"]][[\"corLocal\"]])\nplot(predmaps[[\"summer\"]][[\"difference2\"]])\n\n### save prediction maps as data and gis layers\n\nallPoints <- list()\nallPoints[[\"summer\"]] <- readOGR(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\GIS\\\\Rasters\",\"SummerUsed\")\nallPoints[[\"winter\"]] <- readOGR(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\GIS\\\\Rasters\",\"WinterUsed\")\n\nplot(rastercovs$summer$elevation)\nplot(predmaps$summer$RF)\nplot(predmaps$summer$GLMM)\nplot(allPoints$summer[seq(1,nrow(allPoints$summer),by=20),],pch=1,cex=0.5,add=T,col=gray(0.1))\n\n\n### do class check..\n\nsapply(deer$summer,class)\nsapply(newdata,class)\n\n\n\n## visualize predictions from the two methods ...\n\n\n## first read in map of points \n\n?plot.raster\n\nbreakpoints <- c(0,0.2,0.4,0.5,0.6,0.7,0.8,0.9,1)\ncols <- brewer.pal(length(breakpoints),\"Greens\")  #   \"RdYlGn\"\n  \n#par(mfrow=c(1,2))\ngraphics.off()\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\EcolAndEcol_submitted\\\\figures\")\nsvg(width=5,height=3,file=\"GLMM_SummerPredictions1.svg\")\nprettymap(plot(predmaps[[\"summer\"]][[\"GLMM\"]],xaxt=\"n\",yaxt=\"n\",breaks=breakpoints,col=cols),drawarrow = F,mai=c(0,0,0,0.1),bty=\"n\",drawbox = F)\nplot(allPoints$summer[seq(1,nrow(allPoints$summer),by=30),],pch=1,cex=0.5,add=T,col=gray(0.1))\ndev.off()\n\n\nbreakpoints <- c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,1)\ncols <- brewer.pal(length(breakpoints),\"Greens\")  #   \"RdYlGn\"\n\ngraphics.off()\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\EcolAndEcol_submitted\\\\figures\")\nsvg(width=5,height=3,file=\"RF_SummerPredictions1.svg\")\nprettymap(plot(predmaps[[\"summer\"]][[\"RF\"]],xaxt=\"n\",yaxt=\"n\",breaks=breakpoints,col=cols),drawarrow = F,mai=c(0,0,0,0.1),bty=\"n\",drawbox = F)\nplot(allPoints$summer[seq(1,nrow(allPoints$summer),by=30),],pch=1,cex=0.5,add=T,col=gray(0.1))\ndev.off()\n\nbreakpoints <- c(-1,-0.75,-0.5,-0.25,0,0.25,0.5,0.75,1)\ncols <- brewer.pal(length(breakpoints),\"RdYlGn\")  #   \"\"\n\ngraphics.off()\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\EcolAndEcol_submitted\\\\figures\")\nsvg(width=5,height=3,file=\"summer_corLocal.svg\")\nprettymap(plot(predmaps[[\"summer\"]][[\"corLocal\"]],xaxt=\"n\",yaxt=\"n\",breaks=breakpoints,col=cols),drawarrow = F,mai=c(0,0,0,0.1),bty=\"n\",drawbox = F)\nplot(allPoints$summer[seq(1,nrow(allPoints$summer),by=30),],pch=1,cex=0.5,add=T,col=gray(0.1))\ndev.off()\ngraphics.off()\n\nbreakpoints <- c(-0.8,-0.5,-0.2,0,0.1,0.2,0.4)\ncols <- brewer.pal(length(breakpoints),\"PuOr\")[length(breakpoints):1]  #   \"\"\n\ngraphics.off()\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\EcolAndEcol_submitted\\\\figures\")\nsvg(width=5,height=3,file=\"summer_difference.svg\")\nprettymap(plot(predmaps[[\"summer\"]][[\"difference2\"]],xaxt=\"n\",yaxt=\"n\",breaks=breakpoints,col=cols),drawarrow = F,mai=c(0,0,0,0.1),bty=\"n\",drawbox = F)\nplot(allPoints$summer[seq(1,nrow(allPoints$summer),by=30),],pch=1,cex=0.5,add=T,col=gray(0.1))\ndev.off()\ngraphics.off()\n\nbreakpoints <- c(0,0.2,0.3,0.5,0.6,0.7,0.8,0.9,1)\ncols <- brewer.pal(length(breakpoints),\"Greens\")  #   \"RdYlGn\"\n\n#par(mfrow=c(1,2))\ngraphics.off()\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\EcolAndEcol_submitted\\\\figures\")\nsvg(width=3,height=7,file=\"GLMM_WinterPredictions1.svg\")\nprettymap(plot(predmaps[[\"winter\"]][[\"GLMM\"]],xaxt=\"n\",yaxt=\"n\",breaks=breakpoints,col=cols),drawarrow = F,mai=c(0,0,0,0.1),bty=\"n\",drawbox = F)\nplot(allPoints$winter[seq(1,nrow(allPoints$winter),by=20),],pch=1,cex=0.5,add=T,col=gray(0.1))\ndev.off()\n\nbreakpoints <- c(0,0.2,0.3,0.4,0.5,0.6,0.7,0.8,1)\ncols <- brewer.pal(length(breakpoints),\"Greens\")  #   \"RdYlGn\"\n\ngraphics.off()\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\EcolAndEcol_submitted\\\\figures\")\nsvg(width=3,height=7,file=\"RF_WinterPredictions1.svg\")\nprettymap(plot(predmaps[[\"winter\"]][[\"RF\"]],xaxt=\"n\",yaxt=\"n\",breaks=breakpoints,col=cols),drawarrow = F,mai=c(0,0,0,0.1),bty=\"n\",drawbox = F)\nplot(allPoints$winter[seq(1,nrow(allPoints$winter),by=20),],pch=1,cex=0.5,add=T,col=gray(0.1))\ndev.off()\n\n\nbreakpoints <- c(-1,-0.75,-0.5,-0.25,0,0.25,0.5,0.75,1)\ncols <- brewer.pal(length(breakpoints),\"RdYlGn\")  #   \"\"\n\ngraphics.off()\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\EcolAndEcol_submitted\\\\figures\")\nsvg(width=3,height=7,file=\"winter_corLocal.svg.svg\")\nprettymap(plot(predmaps[[\"winter\"]][[\"corLocal\"]],xaxt=\"n\",yaxt=\"n\",breaks=breakpoints,col=cols),drawarrow = F,mai=c(0,0,0,0.1),bty=\"n\",drawbox = F)\nplot(allPoints$winter[seq(1,nrow(allPoints$winter),by=20),],pch=1,cex=0.5,add=T,col=gray(0.1))\ndev.off()\n\nbreakpoints <- c(-0.6,-0.4,-0.2,0,0.1,0.2,0.6)\ncols <- brewer.pal(length(breakpoints),\"PuOr\")[length(breakpoints):1]  #   \"\"\n\ngraphics.off()\nsetwd(\"E:\\\\Dropbox\\\\Mule Deer\\\\Methods paper\\\\EcolAndEcol_submitted\\\\figures\")\nsvg(width=3,height=7,file=\"Winter_difference.svg\")\nprettymap(plot(predmaps[[\"winter\"]][[\"difference2\"]],xaxt=\"n\",yaxt=\"n\",breaks=breakpoints,col=cols),drawarrow = F,mai=c(0,0,0,0.1),bty=\"n\",drawbox = F)\nplot(allPoints$winter[seq(1,nrow(allPoints$winter),by=20),],pch=1,cex=0.5,add=T,col=gray(0.1))\ndev.off()\ngraphics.off()\n\n\n\nplot(rastercovs[[\"summer\"]][[1:6]])\n\n\n#### explore\nplot(predmaps[[\"summer\"]][[\"GLMM\"]])\nz1 <- drawExtent()\nz2 <- crop(rastercovs[[\"summer\"]][[1:6]],y=z1)\nplot(z2)\n\n\nveg_class <- levels(rastercovs$summer$veg_class)\nnames(veg_class) <- \"veg_class\"\n\nfactor_list <- list(veg_class)\nnames(factor_list) <- cat_cov\n\naltid<-factor( 'P003',levels=levels(deer[[\"summer\"]]$altid))\nadd2<-data.frame(altid)\nstr(add2)\nnewdata <- data.frame(\n  cos_aspect = mean(getValues(rastercovs$summer$cos_aspect)),\n  sin_aspect = mean(getValues(rastercovs$summer$sin_aspect)),\n  elevation = 1773,\n  slope = as.integer(mean(getValues(rastercovs$summer$slope))),\n  dist_to_water = mean(getValues(rastercovs$summer$dist_to_water)),\n  veg_class = factor(veg_class$veg_class$classes[match(28,veg_class$veg_class$ID)],levels=levels(deer$summer$veg_class)),\n  stand_cos_aspect = mean(getValues(rastercovs$summer$stand_cos_aspect)),\n  stand_sin_aspect = mean(getValues(rastercovs$summer$stand_sin_aspect)),\n  stand_elevation = (0 - mean(deer$summer$elevation))/sd(deer$summer$elevation),\n  stand_slope = mean(getValues(rastercovs$summer$stand_slope)),\n  stand_dist_to_water = mean(getValues(rastercovs$summer$stand_dist_to_water))\n)\n\nplogis(predict(GLMMs[[\"summer\"]],newdata))\n\n\n# apparently the strong preference for summer region A is due to the interaction effect between slope and elevation (Fig. X)\n#  whereby low elevation, high-slope areas are strongly preferred. \n\n\nsummary(GLMMs[[\"summer\"]])\n\n\n\n\n\n\n#### explore winter\nplot(predmaps[[\"winter\"]][[\"difference2\"]])\nz1 <- drawExtent()\nz2 <- crop(rastercovs[[\"winter\"]][[1:6]],y=z1)\nplot(z2)\n\nplot(predmaps[[\"winter\"]][[\"difference2\"]])\nplot(z1,add=T)\n\nplot(rastercovs$winter$elevation)\nplot(z1,add=T)\n\nplot(rastercovs$winter$slope)\nplot(z1,add=T)\n\nplot(rastercovs$winter$dist_to_water)\nplot(z1,add=T)\n\ntable(z2$veg_class@data@values)   # focal area is mostly P-J\n\nveg_class <- levels(rastercovs$winter$veg_class)\nnames(veg_class) <- \"veg_class\"\n\nfactor_list <- list(veg_class)\nnames(factor_list) <- cat_cov\n\naltid<-factor( 'P005',levels=levels(deer[[\"winter\"]]$altid))\nadd2<-data.frame(altid)\nstr(add2)\nnewdata <- data.frame(\n  cos_aspect = mean(getValues(rastercovs$winter$cos_aspect)),\n  sin_aspect = mean(getValues(rastercovs$winter$sin_aspect)),\n  elevation = as.integer(1900),\n  slope = as.integer(60),\n  dist_to_water = 2500,\n  veg_class = factor(veg_class$veg_class$classes[match(8,veg_class$veg_class$ID)],levels=levels(deer$winter$veg_class)),\n  stand_cos_aspect = mean(getValues(rastercovs$winter$stand_cos_aspect)),\n  stand_sin_aspect = mean(getValues(rastercovs$winter$stand_sin_aspect)),\n  stand_elevation = (1900 - mean(deer$winter$elevation))/sd(deer$winter$elevation),\n  stand_slope = (60 - mean(deer$winter$slope))/sd(deer$winter$slope),\n  stand_dist_to_water = (2500 - mean(deer$winter$dist_to_water))/sd(deer$winter$dist_to_water),\n  altid = altid\n)\n\nplogis(predict(GLMMs[[\"winter\"]],newdata))   ## very high\n\npredict(RFs[[\"winter\"]],newdata,OOB=T,type=\"prob\")   ## \n\n\nlapply(deer$winter,class)\n\nlapply(newdata,class)\n\n\n# apparently the strong preference for winter region B is due to the interaction effect between slope and elevation (Fig. X)\n#  whereby low elevation, high-slope areas are strongly preferred. \n\n\ngetwd()\n\nsave(deer,file=\"deerdata.RData\")\n\n",
    "created" : 1506986810511.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1228760211",
    "id" : "1DC0E9EA",
    "lastKnownWriteTime" : 1512159470,
    "last_content_update" : 1512159470872,
    "path" : "E:/GIT/Mule_Deer_RFvsRSF/METHODS_PAPER_MASTER_CODE2.R",
    "project_path" : "METHODS_PAPER_MASTER_CODE2.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}